/****************************************************************************
Copyright (c) 2017 LiangYue.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sub license, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

#include "_CrossEngine.h"


namespace CrossEngine {

	typedef struct VkValueString {
		uint32_t value;
		const char *text;
	} VkValueString;

	static VkValueString vkFormatString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_FORMAT_UNDEFINED, "VK_FORMAT_UNDEFINED",
		VK_FORMAT_R4G4_UNORM_PACK8, "VK_FORMAT_R4G4_UNORM_PACK8",
		VK_FORMAT_R4G4B4A4_UNORM_PACK16, "VK_FORMAT_R4G4B4A4_UNORM_PACK16",
		VK_FORMAT_B4G4R4A4_UNORM_PACK16, "VK_FORMAT_B4G4R4A4_UNORM_PACK16",
		VK_FORMAT_R5G6B5_UNORM_PACK16, "VK_FORMAT_R5G6B5_UNORM_PACK16",
		VK_FORMAT_B5G6R5_UNORM_PACK16, "VK_FORMAT_B5G6R5_UNORM_PACK16",
		VK_FORMAT_R5G5B5A1_UNORM_PACK16, "VK_FORMAT_R5G5B5A1_UNORM_PACK16",
		VK_FORMAT_B5G5R5A1_UNORM_PACK16, "VK_FORMAT_B5G5R5A1_UNORM_PACK16",
		VK_FORMAT_A1R5G5B5_UNORM_PACK16, "VK_FORMAT_A1R5G5B5_UNORM_PACK16",
		VK_FORMAT_R8_UNORM, "VK_FORMAT_R8_UNORM",
		VK_FORMAT_R8_SNORM, "VK_FORMAT_R8_SNORM",
		VK_FORMAT_R8_USCALED, "VK_FORMAT_R8_USCALED",
		VK_FORMAT_R8_SSCALED, "VK_FORMAT_R8_SSCALED",
		VK_FORMAT_R8_UINT, "VK_FORMAT_R8_UINT",
		VK_FORMAT_R8_SINT, "VK_FORMAT_R8_SINT",
		VK_FORMAT_R8_SRGB, "VK_FORMAT_R8_SRGB",
		VK_FORMAT_R8G8_UNORM, "VK_FORMAT_R8G8_UNORM",
		VK_FORMAT_R8G8_SNORM, "VK_FORMAT_R8G8_SNORM",
		VK_FORMAT_R8G8_USCALED, "VK_FORMAT_R8G8_USCALED",
		VK_FORMAT_R8G8_SSCALED, "VK_FORMAT_R8G8_SSCALED",
		VK_FORMAT_R8G8_UINT, "VK_FORMAT_R8G8_UINT",
		VK_FORMAT_R8G8_SINT, "VK_FORMAT_R8G8_SINT",
		VK_FORMAT_R8G8_SRGB, "VK_FORMAT_R8G8_SRGB",
		VK_FORMAT_R8G8B8_UNORM, "VK_FORMAT_R8G8B8_UNORM",
		VK_FORMAT_R8G8B8_SNORM, "VK_FORMAT_R8G8B8_SNORM",
		VK_FORMAT_R8G8B8_USCALED, "VK_FORMAT_R8G8B8_USCALED",
		VK_FORMAT_R8G8B8_SSCALED, "VK_FORMAT_R8G8B8_SSCALED",
		VK_FORMAT_R8G8B8_UINT, "VK_FORMAT_R8G8B8_UINT",
		VK_FORMAT_R8G8B8_SINT, "VK_FORMAT_R8G8B8_SINT",
		VK_FORMAT_R8G8B8_SRGB, "VK_FORMAT_R8G8B8_SRGB",
		VK_FORMAT_B8G8R8_UNORM, "VK_FORMAT_B8G8R8_UNORM",
		VK_FORMAT_B8G8R8_SNORM, "VK_FORMAT_B8G8R8_SNORM",
		VK_FORMAT_B8G8R8_USCALED, "VK_FORMAT_B8G8R8_USCALED",
		VK_FORMAT_B8G8R8_SSCALED, "VK_FORMAT_B8G8R8_SSCALED",
		VK_FORMAT_B8G8R8_UINT, "VK_FORMAT_B8G8R8_UINT",
		VK_FORMAT_B8G8R8_SINT, "VK_FORMAT_B8G8R8_SINT",
		VK_FORMAT_B8G8R8_SRGB, "VK_FORMAT_B8G8R8_SRGB",
		VK_FORMAT_R8G8B8A8_UNORM, "VK_FORMAT_R8G8B8A8_UNORM",
		VK_FORMAT_R8G8B8A8_SNORM, "VK_FORMAT_R8G8B8A8_SNORM",
		VK_FORMAT_R8G8B8A8_USCALED, "VK_FORMAT_R8G8B8A8_USCALED",
		VK_FORMAT_R8G8B8A8_SSCALED, "VK_FORMAT_R8G8B8A8_SSCALED",
		VK_FORMAT_R8G8B8A8_UINT, "VK_FORMAT_R8G8B8A8_UINT",
		VK_FORMAT_R8G8B8A8_SINT, "VK_FORMAT_R8G8B8A8_SINT",
		VK_FORMAT_R8G8B8A8_SRGB, "VK_FORMAT_R8G8B8A8_SRGB",
		VK_FORMAT_B8G8R8A8_UNORM, "VK_FORMAT_B8G8R8A8_UNORM",
		VK_FORMAT_B8G8R8A8_SNORM, "VK_FORMAT_B8G8R8A8_SNORM",
		VK_FORMAT_B8G8R8A8_USCALED, "VK_FORMAT_B8G8R8A8_USCALED",
		VK_FORMAT_B8G8R8A8_SSCALED, "VK_FORMAT_B8G8R8A8_SSCALED",
		VK_FORMAT_B8G8R8A8_UINT, "VK_FORMAT_B8G8R8A8_UINT",
		VK_FORMAT_B8G8R8A8_SINT, "VK_FORMAT_B8G8R8A8_SINT",
		VK_FORMAT_B8G8R8A8_SRGB, "VK_FORMAT_B8G8R8A8_SRGB",
		VK_FORMAT_A8B8G8R8_UNORM_PACK32, "VK_FORMAT_A8B8G8R8_UNORM_PACK32",
		VK_FORMAT_A8B8G8R8_SNORM_PACK32, "VK_FORMAT_A8B8G8R8_SNORM_PACK32",
		VK_FORMAT_A8B8G8R8_USCALED_PACK32, "VK_FORMAT_A8B8G8R8_USCALED_PACK32",
		VK_FORMAT_A8B8G8R8_SSCALED_PACK32, "VK_FORMAT_A8B8G8R8_SSCALED_PACK32",
		VK_FORMAT_A8B8G8R8_UINT_PACK32, "VK_FORMAT_A8B8G8R8_UINT_PACK32",
		VK_FORMAT_A8B8G8R8_SINT_PACK32, "VK_FORMAT_A8B8G8R8_SINT_PACK32",
		VK_FORMAT_A8B8G8R8_SRGB_PACK32, "VK_FORMAT_A8B8G8R8_SRGB_PACK32",
		VK_FORMAT_A2R10G10B10_UNORM_PACK32, "VK_FORMAT_A2R10G10B10_UNORM_PACK32",
		VK_FORMAT_A2R10G10B10_SNORM_PACK32, "VK_FORMAT_A2R10G10B10_SNORM_PACK32",
		VK_FORMAT_A2R10G10B10_USCALED_PACK32, "VK_FORMAT_A2R10G10B10_USCALED_PACK32",
		VK_FORMAT_A2R10G10B10_SSCALED_PACK32, "VK_FORMAT_A2R10G10B10_SSCALED_PACK32",
		VK_FORMAT_A2R10G10B10_UINT_PACK32, "VK_FORMAT_A2R10G10B10_UINT_PACK32",
		VK_FORMAT_A2R10G10B10_SINT_PACK32, "VK_FORMAT_A2R10G10B10_SINT_PACK32",
		VK_FORMAT_A2B10G10R10_UNORM_PACK32, "VK_FORMAT_A2B10G10R10_UNORM_PACK32",
		VK_FORMAT_A2B10G10R10_SNORM_PACK32, "VK_FORMAT_A2B10G10R10_SNORM_PACK32",
		VK_FORMAT_A2B10G10R10_USCALED_PACK32, "VK_FORMAT_A2B10G10R10_USCALED_PACK32",
		VK_FORMAT_A2B10G10R10_SSCALED_PACK32, "VK_FORMAT_A2B10G10R10_SSCALED_PACK32",
		VK_FORMAT_A2B10G10R10_UINT_PACK32, "VK_FORMAT_A2B10G10R10_UINT_PACK32",
		VK_FORMAT_A2B10G10R10_SINT_PACK32, "VK_FORMAT_A2B10G10R10_SINT_PACK32",
		VK_FORMAT_R16_UNORM, "VK_FORMAT_R16_UNORM",
		VK_FORMAT_R16_SNORM, "VK_FORMAT_R16_SNORM",
		VK_FORMAT_R16_USCALED, "VK_FORMAT_R16_USCALED",
		VK_FORMAT_R16_SSCALED, "VK_FORMAT_R16_SSCALED",
		VK_FORMAT_R16_UINT, "VK_FORMAT_R16_UINT",
		VK_FORMAT_R16_SINT, "VK_FORMAT_R16_SINT",
		VK_FORMAT_R16_SFLOAT, "VK_FORMAT_R16_SFLOAT",
		VK_FORMAT_R16G16_UNORM, "VK_FORMAT_R16G16_UNORM",
		VK_FORMAT_R16G16_SNORM, "VK_FORMAT_R16G16_SNORM",
		VK_FORMAT_R16G16_USCALED, "VK_FORMAT_R16G16_USCALED",
		VK_FORMAT_R16G16_SSCALED, "VK_FORMAT_R16G16_SSCALED",
		VK_FORMAT_R16G16_UINT, "VK_FORMAT_R16G16_UINT",
		VK_FORMAT_R16G16_SINT, "VK_FORMAT_R16G16_SINT",
		VK_FORMAT_R16G16_SFLOAT, "VK_FORMAT_R16G16_SFLOAT",
		VK_FORMAT_R16G16B16_UNORM, "VK_FORMAT_R16G16B16_UNORM",
		VK_FORMAT_R16G16B16_SNORM, "VK_FORMAT_R16G16B16_SNORM",
		VK_FORMAT_R16G16B16_USCALED, "VK_FORMAT_R16G16B16_USCALED",
		VK_FORMAT_R16G16B16_SSCALED, "VK_FORMAT_R16G16B16_SSCALED",
		VK_FORMAT_R16G16B16_UINT, "VK_FORMAT_R16G16B16_UINT",
		VK_FORMAT_R16G16B16_SINT, "VK_FORMAT_R16G16B16_SINT",
		VK_FORMAT_R16G16B16_SFLOAT, "VK_FORMAT_R16G16B16_SFLOAT",
		VK_FORMAT_R16G16B16A16_UNORM, "VK_FORMAT_R16G16B16A16_UNORM",
		VK_FORMAT_R16G16B16A16_SNORM, "VK_FORMAT_R16G16B16A16_SNORM",
		VK_FORMAT_R16G16B16A16_USCALED, "VK_FORMAT_R16G16B16A16_USCALED",
		VK_FORMAT_R16G16B16A16_SSCALED, "VK_FORMAT_R16G16B16A16_SSCALED",
		VK_FORMAT_R16G16B16A16_UINT, "VK_FORMAT_R16G16B16A16_UINT",
		VK_FORMAT_R16G16B16A16_SINT, "VK_FORMAT_R16G16B16A16_SINT",
		VK_FORMAT_R16G16B16A16_SFLOAT, "VK_FORMAT_R16G16B16A16_SFLOAT",
		VK_FORMAT_R32_UINT, "VK_FORMAT_R32_UINT",
		VK_FORMAT_R32_SINT, "VK_FORMAT_R32_SINT",
		VK_FORMAT_R32_SFLOAT, "VK_FORMAT_R32_SFLOAT",
		VK_FORMAT_R32G32_UINT, "VK_FORMAT_R32G32_UINT",
		VK_FORMAT_R32G32_SINT, "VK_FORMAT_R32G32_SINT",
		VK_FORMAT_R32G32_SFLOAT, "VK_FORMAT_R32G32_SFLOAT",
		VK_FORMAT_R32G32B32_UINT, "VK_FORMAT_R32G32B32_UINT",
		VK_FORMAT_R32G32B32_SINT, "VK_FORMAT_R32G32B32_SINT",
		VK_FORMAT_R32G32B32_SFLOAT, "VK_FORMAT_R32G32B32_SFLOAT",
		VK_FORMAT_R32G32B32A32_UINT, "VK_FORMAT_R32G32B32A32_UINT",
		VK_FORMAT_R32G32B32A32_SINT, "VK_FORMAT_R32G32B32A32_SINT",
		VK_FORMAT_R32G32B32A32_SFLOAT, "VK_FORMAT_R32G32B32A32_SFLOAT",
		VK_FORMAT_R64_UINT, "VK_FORMAT_R64_UINT",
		VK_FORMAT_R64_SINT, "VK_FORMAT_R64_SINT",
		VK_FORMAT_R64_SFLOAT, "VK_FORMAT_R64_SFLOAT",
		VK_FORMAT_R64G64_UINT, "VK_FORMAT_R64G64_UINT",
		VK_FORMAT_R64G64_SINT, "VK_FORMAT_R64G64_SINT",
		VK_FORMAT_R64G64_SFLOAT, "VK_FORMAT_R64G64_SFLOAT",
		VK_FORMAT_R64G64B64_UINT, "VK_FORMAT_R64G64B64_UINT",
		VK_FORMAT_R64G64B64_SINT, "VK_FORMAT_R64G64B64_SINT",
		VK_FORMAT_R64G64B64_SFLOAT, "VK_FORMAT_R64G64B64_SFLOAT",
		VK_FORMAT_R64G64B64A64_UINT, "VK_FORMAT_R64G64B64A64_UINT",
		VK_FORMAT_R64G64B64A64_SINT, "VK_FORMAT_R64G64B64A64_SINT",
		VK_FORMAT_R64G64B64A64_SFLOAT, "VK_FORMAT_R64G64B64A64_SFLOAT",
		VK_FORMAT_B10G11R11_UFLOAT_PACK32, "VK_FORMAT_B10G11R11_UFLOAT_PACK32",
		VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, "VK_FORMAT_E5B9G9R9_UFLOAT_PACK32",
		VK_FORMAT_D16_UNORM, "VK_FORMAT_D16_UNORM",
		VK_FORMAT_X8_D24_UNORM_PACK32, "VK_FORMAT_X8_D24_UNORM_PACK32",
		VK_FORMAT_D32_SFLOAT, "VK_FORMAT_D32_SFLOAT",
		VK_FORMAT_S8_UINT, "VK_FORMAT_S8_UINT",
		VK_FORMAT_D16_UNORM_S8_UINT, "VK_FORMAT_D16_UNORM_S8_UINT",
		VK_FORMAT_D24_UNORM_S8_UINT, "VK_FORMAT_D24_UNORM_S8_UINT",
		VK_FORMAT_D32_SFLOAT_S8_UINT, "VK_FORMAT_D32_SFLOAT_S8_UINT",
		VK_FORMAT_BC1_RGB_UNORM_BLOCK, "VK_FORMAT_BC1_RGB_UNORM_BLOCK",
		VK_FORMAT_BC1_RGB_SRGB_BLOCK, "VK_FORMAT_BC1_RGB_SRGB_BLOCK",
		VK_FORMAT_BC1_RGBA_UNORM_BLOCK, "VK_FORMAT_BC1_RGBA_UNORM_BLOCK",
		VK_FORMAT_BC1_RGBA_SRGB_BLOCK, "VK_FORMAT_BC1_RGBA_SRGB_BLOCK",
		VK_FORMAT_BC2_UNORM_BLOCK, "VK_FORMAT_BC2_UNORM_BLOCK",
		VK_FORMAT_BC2_SRGB_BLOCK, "VK_FORMAT_BC2_SRGB_BLOCK",
		VK_FORMAT_BC3_UNORM_BLOCK, "VK_FORMAT_BC3_UNORM_BLOCK",
		VK_FORMAT_BC3_SRGB_BLOCK, "VK_FORMAT_BC3_SRGB_BLOCK",
		VK_FORMAT_BC4_UNORM_BLOCK, "VK_FORMAT_BC4_UNORM_BLOCK",
		VK_FORMAT_BC4_SNORM_BLOCK, "VK_FORMAT_BC4_SNORM_BLOCK",
		VK_FORMAT_BC5_UNORM_BLOCK, "VK_FORMAT_BC5_UNORM_BLOCK",
		VK_FORMAT_BC5_SNORM_BLOCK, "VK_FORMAT_BC5_SNORM_BLOCK",
		VK_FORMAT_BC6H_UFLOAT_BLOCK, "VK_FORMAT_BC6H_UFLOAT_BLOCK",
		VK_FORMAT_BC6H_SFLOAT_BLOCK, "VK_FORMAT_BC6H_SFLOAT_BLOCK",
		VK_FORMAT_BC7_UNORM_BLOCK, "VK_FORMAT_BC7_UNORM_BLOCK",
		VK_FORMAT_BC7_SRGB_BLOCK, "VK_FORMAT_BC7_SRGB_BLOCK",
		VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK",
		VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, "VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK",
		VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, "VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK",
		VK_FORMAT_EAC_R11_UNORM_BLOCK, "VK_FORMAT_EAC_R11_UNORM_BLOCK",
		VK_FORMAT_EAC_R11_SNORM_BLOCK, "VK_FORMAT_EAC_R11_SNORM_BLOCK",
		VK_FORMAT_EAC_R11G11_UNORM_BLOCK, "VK_FORMAT_EAC_R11G11_UNORM_BLOCK",
		VK_FORMAT_EAC_R11G11_SNORM_BLOCK, "VK_FORMAT_EAC_R11G11_SNORM_BLOCK",
		VK_FORMAT_ASTC_4x4_UNORM_BLOCK, "VK_FORMAT_ASTC_4x4_UNORM_BLOCK",
		VK_FORMAT_ASTC_4x4_SRGB_BLOCK, "VK_FORMAT_ASTC_4x4_SRGB_BLOCK",
		VK_FORMAT_ASTC_5x4_UNORM_BLOCK, "VK_FORMAT_ASTC_5x4_UNORM_BLOCK",
		VK_FORMAT_ASTC_5x4_SRGB_BLOCK, "VK_FORMAT_ASTC_5x4_SRGB_BLOCK",
		VK_FORMAT_ASTC_5x5_UNORM_BLOCK, "VK_FORMAT_ASTC_5x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_5x5_SRGB_BLOCK, "VK_FORMAT_ASTC_5x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_6x5_UNORM_BLOCK, "VK_FORMAT_ASTC_6x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_6x5_SRGB_BLOCK, "VK_FORMAT_ASTC_6x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_6x6_UNORM_BLOCK, "VK_FORMAT_ASTC_6x6_UNORM_BLOCK",
		VK_FORMAT_ASTC_6x6_SRGB_BLOCK, "VK_FORMAT_ASTC_6x6_SRGB_BLOCK",
		VK_FORMAT_ASTC_8x5_UNORM_BLOCK, "VK_FORMAT_ASTC_8x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_8x5_SRGB_BLOCK, "VK_FORMAT_ASTC_8x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_8x6_UNORM_BLOCK, "VK_FORMAT_ASTC_8x6_UNORM_BLOCK",
		VK_FORMAT_ASTC_8x6_SRGB_BLOCK, "VK_FORMAT_ASTC_8x6_SRGB_BLOCK",
		VK_FORMAT_ASTC_8x8_UNORM_BLOCK, "VK_FORMAT_ASTC_8x8_UNORM_BLOCK",
		VK_FORMAT_ASTC_8x8_SRGB_BLOCK, "VK_FORMAT_ASTC_8x8_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x5_UNORM_BLOCK, "VK_FORMAT_ASTC_10x5_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x5_SRGB_BLOCK, "VK_FORMAT_ASTC_10x5_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x6_UNORM_BLOCK, "VK_FORMAT_ASTC_10x6_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x6_SRGB_BLOCK, "VK_FORMAT_ASTC_10x6_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x8_UNORM_BLOCK, "VK_FORMAT_ASTC_10x8_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x8_SRGB_BLOCK, "VK_FORMAT_ASTC_10x8_SRGB_BLOCK",
		VK_FORMAT_ASTC_10x10_UNORM_BLOCK, "VK_FORMAT_ASTC_10x10_UNORM_BLOCK",
		VK_FORMAT_ASTC_10x10_SRGB_BLOCK, "VK_FORMAT_ASTC_10x10_SRGB_BLOCK",
		VK_FORMAT_ASTC_12x10_UNORM_BLOCK, "VK_FORMAT_ASTC_12x10_UNORM_BLOCK",
		VK_FORMAT_ASTC_12x10_SRGB_BLOCK, "VK_FORMAT_ASTC_12x10_SRGB_BLOCK",
		VK_FORMAT_ASTC_12x12_UNORM_BLOCK, "VK_FORMAT_ASTC_12x12_UNORM_BLOCK",
		VK_FORMAT_ASTC_12x12_SRGB_BLOCK, "VK_FORMAT_ASTC_12x12_SRGB_BLOCK",
	};

	static VkValueString vkImageTypeString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_IMAGE_TYPE_1D, "VK_IMAGE_TYPE_1D",
		VK_IMAGE_TYPE_2D, "VK_IMAGE_TYPE_2D",
		VK_IMAGE_TYPE_3D, "VK_IMAGE_TYPE_3D",
	};

	static VkValueString vkImageTilingString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_IMAGE_TILING_OPTIMAL, "VK_IMAGE_TILING_OPTIMAL",
		VK_IMAGE_TILING_LINEAR, "VK_IMAGE_TILING_LINEAR",
	};

	static VkValueString vkImageLayoutString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_IMAGE_LAYOUT_UNDEFINED, "VK_IMAGE_LAYOUT_UNDEFINED",
		VK_IMAGE_LAYOUT_GENERAL, "VK_IMAGE_LAYOUT_GENERAL",
		VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, "VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL",
		VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, "VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL",
		VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL, "VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL",
		VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, "VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL",
		VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, "VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL",
		VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, "VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL",
		VK_IMAGE_LAYOUT_PREINITIALIZED, "VK_IMAGE_LAYOUT_PREINITIALIZED"
	};

	static VkValueString vkFilterString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_FILTER_NEAREST, "VK_FILTER_NEAREST",
		VK_FILTER_LINEAR, "VK_FILTER_LINEAR",
	};

	static VkValueString vkSamplerMipmapModeString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_SAMPLER_MIPMAP_MODE_NEAREST, "VK_SAMPLER_MIPMAP_MODE_NEAREST",
		VK_SAMPLER_MIPMAP_MODE_LINEAR, "VK_SAMPLER_MIPMAP_MODE_LINEAR",
	};

	static VkValueString vkSamplerAddressModeString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_SAMPLER_ADDRESS_MODE_REPEAT, "VK_SAMPLER_ADDRESS_MODE_REPEAT",
		VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT, "VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT",
		VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE,  "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE",
		VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, "VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER",
		VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE, "VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE",
	};

	static VkValueString vkSampleCountFlagBitsString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_SAMPLE_COUNT_1_BIT, "VK_SAMPLE_COUNT_1_BIT",
		VK_SAMPLE_COUNT_2_BIT, "VK_SAMPLE_COUNT_2_BIT",
		VK_SAMPLE_COUNT_4_BIT, "VK_SAMPLE_COUNT_4_BIT",
		VK_SAMPLE_COUNT_8_BIT, "VK_SAMPLE_COUNT_8_BIT",
		VK_SAMPLE_COUNT_16_BIT, "VK_SAMPLE_COUNT_16_BIT",
		VK_SAMPLE_COUNT_32_BIT, "VK_SAMPLE_COUNT_32_BIT",
		VK_SAMPLE_COUNT_64_BIT, "VK_SAMPLE_COUNT_64_BIT",
	};

	static VkValueString vkBufferUsageFlagsString[] = {
		VK_BUFFER_USAGE_TRANSFER_SRC_BIT, "VK_BUFFER_USAGE_TRANSFER_SRC_BIT",
		VK_BUFFER_USAGE_TRANSFER_DST_BIT, "VK_BUFFER_USAGE_TRANSFER_DST_BIT",
		VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, "VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT",
		VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, "VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT",
		VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, "VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT",
		VK_BUFFER_USAGE_STORAGE_BUFFER_BIT, "VK_BUFFER_USAGE_STORAGE_BUFFER_BIT",
		VK_BUFFER_USAGE_INDEX_BUFFER_BIT, "VK_BUFFER_USAGE_INDEX_BUFFER_BIT",
		VK_BUFFER_USAGE_VERTEX_BUFFER_BIT, "VK_BUFFER_USAGE_VERTEX_BUFFER_BIT",
		VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT, "VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT"
	};

	static VkValueString vkAttachmentLoadOpString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_ATTACHMENT_LOAD_OP_LOAD, "VK_ATTACHMENT_LOAD_OP_LOAD",
		VK_ATTACHMENT_LOAD_OP_CLEAR, "VK_ATTACHMENT_LOAD_OP_CLEAR",
		VK_ATTACHMENT_LOAD_OP_DONT_CARE, "VK_ATTACHMENT_LOAD_OP_DONT_CARE",
	};

	static VkValueString vkAttachmentStoreOpString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_ATTACHMENT_STORE_OP_STORE, "VK_ATTACHMENT_STORE_OP_STORE",
		VK_ATTACHMENT_STORE_OP_DONT_CARE, "VK_ATTACHMENT_STORE_OP_DONT_CARE",
	};

	static VkValueString vkPipelineStageFlagsString[] = {
		VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, "VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT",
		VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT, "VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT",
		VK_PIPELINE_STAGE_VERTEX_INPUT_BIT, "VK_PIPELINE_STAGE_VERTEX_INPUT_BIT",
		VK_PIPELINE_STAGE_VERTEX_SHADER_BIT, "VK_PIPELINE_STAGE_VERTEX_SHADER_BIT",
		VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT, "VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT",
		VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT, "VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT",
		VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT, "VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT",
		VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, "VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT",
		VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT, "VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT",
		VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, "VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT",
		VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, "VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT",
		VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT, "VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT",
		VK_PIPELINE_STAGE_TRANSFER_BIT, "VK_PIPELINE_STAGE_TRANSFER_BIT",
		VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, "VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT",
		VK_PIPELINE_STAGE_HOST_BIT, "VK_PIPELINE_STAGE_HOST_BIT",
		VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT, "VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT",
		VK_PIPELINE_STAGE_ALL_COMMANDS_BIT, "VK_PIPELINE_STAGE_ALL_COMMANDS_BIT",
	};

	static VkValueString vkAccessFlagsString[] = {
		VK_ACCESS_INDIRECT_COMMAND_READ_BIT, "VK_ACCESS_INDIRECT_COMMAND_READ_BIT",
		VK_ACCESS_INDEX_READ_BIT, "VK_ACCESS_INDEX_READ_BIT",
		VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT, "VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT",
		VK_ACCESS_UNIFORM_READ_BIT, "VK_ACCESS_UNIFORM_READ_BIT",
		VK_ACCESS_INPUT_ATTACHMENT_READ_BIT, "VK_ACCESS_INPUT_ATTACHMENT_READ_BIT",
		VK_ACCESS_SHADER_READ_BIT, "VK_ACCESS_SHADER_READ_BIT",
		VK_ACCESS_SHADER_WRITE_BIT, "VK_ACCESS_SHADER_WRITE_BIT",
		VK_ACCESS_COLOR_ATTACHMENT_READ_BIT, "VK_ACCESS_COLOR_ATTACHMENT_READ_BIT",
		VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT, "VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT",
		VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT, "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT",
		VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT, "VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT",
		VK_ACCESS_TRANSFER_READ_BIT, "VK_ACCESS_TRANSFER_READ_BIT",
		VK_ACCESS_TRANSFER_WRITE_BIT, "VK_ACCESS_TRANSFER_WRITE_BIT",
		VK_ACCESS_HOST_READ_BIT, "VK_ACCESS_HOST_READ_BIT",
		VK_ACCESS_HOST_WRITE_BIT, "VK_ACCESS_HOST_WRITE_BIT",
		VK_ACCESS_MEMORY_READ_BIT, "VK_ACCESS_MEMORY_READ_BIT",
		VK_ACCESS_MEMORY_WRITE_BIT, "VK_ACCESS_MEMORY_WRITE_BIT",
	};

	static VkValueString vkDescriptorTypeString[] = {
		0xFFFFFFFF, "UNKNOWN",
		VK_DESCRIPTOR_TYPE_SAMPLER, "VK_DESCRIPTOR_TYPE_SAMPLER",
		VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, "VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER",
		VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, "VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE",
		VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, "VK_DESCRIPTOR_TYPE_STORAGE_IMAGE",
		VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, "VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER",
		VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, "VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER",
		VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER",
		VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER",
		VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, "VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC",
		VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, "VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC",
		VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, "VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT",
	};


	static char* strcat_or(char *dst, const char *src, BOOL *or)
	{
		if (*or == TRUE) {
			strcat(dst, "|");
		}

		*or = TRUE;
		return strcat(dst, src);
	}


	VkFormatProperties CVulkanHelper::vkFormatProperties[VK_FORMAT_RANGE_SIZE];
	VkComponentMapping CVulkanHelper::vkFormatComponentMapping[VK_FORMAT_RANGE_SIZE];

	void CVulkanHelper::vkSetupFormat(VkPhysicalDevice vkPhysicalDevice)
	{
		for (uint32_t indexFormat = 0; indexFormat < VK_FORMAT_RANGE_SIZE; indexFormat++) {
			vkGetPhysicalDeviceFormatProperties(vkPhysicalDevice, (VkFormat)indexFormat, &vkFormatProperties[indexFormat]);

			vkFormatComponentMapping[indexFormat].r = VK_COMPONENT_SWIZZLE_R;
			vkFormatComponentMapping[indexFormat].g = VK_COMPONENT_SWIZZLE_G;
			vkFormatComponentMapping[indexFormat].b = VK_COMPONENT_SWIZZLE_B;
			vkFormatComponentMapping[indexFormat].a = VK_COMPONENT_SWIZZLE_A;
		}

		vkFormatComponentMapping[VK_FORMAT_B8G8R8A8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_R8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R16_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_B10G11R11_UFLOAT_PACK32] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_D24_UNORM_S8_UINT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
		vkFormatComponentMapping[VK_FORMAT_D32_SFLOAT_S8_UINT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
		vkFormatComponentMapping[VK_FORMAT_D16_UNORM_S8_UINT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
		vkFormatComponentMapping[VK_FORMAT_D16_UNORM] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
		vkFormatComponentMapping[VK_FORMAT_R32G32_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R32G32B32A32_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_R16G16_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R16G16_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R16_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R16_SINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R32_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R32_SINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R8_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_X8_D24_UNORM_PACK32] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_D32_SFLOAT] = { VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY, VK_COMPONENT_SWIZZLE_IDENTITY };
		vkFormatComponentMapping[VK_FORMAT_R16_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_A2B10G10R10_UNORM_PACK32] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_R5G6B5_UNORM_PACK16] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R8G8B8A8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_R16G16_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_R16G16B16A16_SINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_R32G32B32_UINT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R8G8_UNORM] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_R32_SFLOAT] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_BC1_RGB_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_BC2_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_BC3_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_BC4_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_BC5_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_BC6H_UFLOAT_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_BC7_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_ASTC_4x4_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_ASTC_6x6_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_ASTC_8x8_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_ASTC_10x10_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_ASTC_12x12_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
		vkFormatComponentMapping[VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_ZERO };
		vkFormatComponentMapping[VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK] = { VK_COMPONENT_SWIZZLE_R, VK_COMPONENT_SWIZZLE_G, VK_COMPONENT_SWIZZLE_B, VK_COMPONENT_SWIZZLE_A };
	}

	const VkComponentMapping& CVulkanHelper::vkGetFormatComponentMapping(VkFormat format)
	{
		return vkFormatComponentMapping[format];
	}

	VkBool32 CVulkanHelper::vkIsFormatSupported(VkFormat format)
	{
		return vkFormatProperties[format].bufferFeatures || vkFormatProperties[format].linearTilingFeatures || vkFormatProperties[format].optimalTilingFeatures ? VK_TRUE : VK_FALSE;
	}

	VkBool32 CVulkanHelper::vkIsFormatDepthOnly(VkFormat format)
	{
		switch (format) {
		case VK_FORMAT_D16_UNORM: return VK_TRUE;
		case VK_FORMAT_D32_SFLOAT: return VK_TRUE;
		default: return VK_FALSE;
		}
	}

	VkBool32 CVulkanHelper::vkIsFormatStencilOnly(VkFormat format)
	{
		switch (format) {
		case VK_FORMAT_S8_UINT: return VK_TRUE;
		default: return VK_FALSE;
		}
	}

	VkBool32 CVulkanHelper::vkIsFormatDepthStencil(VkFormat format)
	{
		switch (format) {
		case VK_FORMAT_D16_UNORM_S8_UINT: return VK_TRUE;
		case VK_FORMAT_D24_UNORM_S8_UINT: return VK_TRUE;
		case VK_FORMAT_D32_SFLOAT_S8_UINT: return VK_TRUE;
		default: return VK_FALSE;
		}
	}

	VkAccessFlags CVulkanHelper::vkGetAccessMask(VkImageLayout layout)
	{
		switch (layout) {
		case VK_IMAGE_LAYOUT_PREINITIALIZED: return VK_ACCESS_HOST_WRITE_BIT;
		case VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: return VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;
		case VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: return VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
		case VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: return VK_ACCESS_TRANSFER_READ_BIT;
		case VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: return VK_ACCESS_TRANSFER_WRITE_BIT;
		case VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: return VK_ACCESS_SHADER_READ_BIT;
		default: return 0;
		}
	}

	VkPipelineStageFlags CVulkanHelper::vkGetPipelineStageFlags(VkAccessFlags access)
	{
		switch (access) {
		case VK_ACCESS_INDIRECT_COMMAND_READ_BIT: return VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT;
		case VK_ACCESS_INDEX_READ_BIT: return VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
		case VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: VK_PIPELINE_STAGE_VERTEX_INPUT_BIT;
		case VK_ACCESS_UNIFORM_READ_BIT: return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
		case VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: return VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT;
		case VK_ACCESS_SHADER_READ_BIT: return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
		case VK_ACCESS_SHADER_WRITE_BIT: return VK_PIPELINE_STAGE_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT;
		case VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
		case VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: return VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;
		case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: return VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
		case VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: return VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT;
		case VK_ACCESS_TRANSFER_READ_BIT: return VK_PIPELINE_STAGE_TRANSFER_BIT;
		case VK_ACCESS_TRANSFER_WRITE_BIT: return VK_PIPELINE_STAGE_TRANSFER_BIT;
		case VK_ACCESS_HOST_READ_BIT: return VK_PIPELINE_STAGE_HOST_BIT;
		case VK_ACCESS_HOST_WRITE_BIT: return VK_PIPELINE_STAGE_HOST_BIT;
		default: return VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT;
		}
	}

	const char* CVulkanHelper::vkFormatToString(VkFormat format)
	{
		for (int index = 0; index < sizeof(vkFormatString) / sizeof(VkValueString); index++) {
			if (vkFormatString[index].value == format) {
				return vkFormatString[index].text;
			}
		}
		return vkFormatString[0].text;
	}

	const char* CVulkanHelper::vkImageTypeToString(VkImageType type)
	{
		for (int index = 0; index < sizeof(vkImageTypeString) / sizeof(VkValueString); index++) {
			if (vkImageTypeString[index].value == type) {
				return vkImageTypeString[index].text;
			}
		}
		return vkImageTypeString[0].text;
	}

	const char* CVulkanHelper::vkImageTilingToString(VkImageTiling tiling)
	{
		for (int index = 0; index < sizeof(vkImageTilingString) / sizeof(VkValueString); index++) {
			if (vkImageTilingString[index].value == tiling) {
				return vkImageTilingString[index].text;
			}
		}
		return vkImageTilingString[0].text;
	}

	const char* CVulkanHelper::vkImageLayoutToString(VkImageLayout layout)
	{
		for (int index = 0; index < sizeof(vkImageLayoutString) / sizeof(VkValueString); index++) {
			if (vkImageLayoutString[index].value == layout) {
				return vkImageLayoutString[index].text;
			}
		}
		return vkImageLayoutString[0].text;
	}

	const char* CVulkanHelper::vkFilterToString(VkFilter filter)
	{
		for (int index = 0; index < sizeof(vkFilterString) / sizeof(VkValueString); index++) {
			if (vkFilterString[index].value == filter) {
				return vkFilterString[index].text;
			}
		}
		return vkFilterString[0].text;
	}

	const char* CVulkanHelper::vkSamplerMipmapModeToString(VkSamplerMipmapMode mode)
	{
		for (int index = 0; index < sizeof(vkSamplerMipmapModeString) / sizeof(VkValueString); index++) {
			if (vkSamplerMipmapModeString[index].value == mode) {
				return vkSamplerMipmapModeString[index].text;
			}
		}
		return vkSamplerMipmapModeString[0].text;
	}

	const char* CVulkanHelper::vkSamplerAddressModeToString(VkSamplerAddressMode mode)
	{
		for (int index = 0; index < sizeof(vkSamplerAddressModeString) / sizeof(VkValueString); index++) {
			if (vkSamplerAddressModeString[index].value == mode) {
				return vkSamplerAddressModeString[index].text;
			}
		}
		return vkSamplerAddressModeString[0].text;
	}

	const char* CVulkanHelper::vkSampleCountFlagBitsToString(VkSampleCountFlagBits sample)
	{
		for (int index = 0; index < sizeof(vkSampleCountFlagBitsString) / sizeof(VkValueString); index++) {
			if (vkSampleCountFlagBitsString[index].value == sample) {
				return vkSampleCountFlagBitsString[index].text;
			}
		}
		return vkSampleCountFlagBitsString[0].text;
	}

	const char* CVulkanHelper::vkBufferUsageFlagsToString(VkBufferUsageFlags usage, char *szString)
	{
		szString[0] = 0;

		BOOL or = FALSE;
		for (int index = 0; index < sizeof(vkBufferUsageFlagsString) / sizeof(VkValueString); index++) {
			if (vkBufferUsageFlagsString[index].value & usage) {
				strcat_or(szString, vkBufferUsageFlagsString[index].text, &or);
			}
		}

		return szString;
	}

	const char* CVulkanHelper::vkAttachmentLoadOpToString(VkAttachmentLoadOp loadOp)
	{
		for (int index = 0; index < sizeof(vkAttachmentLoadOpString) / sizeof(VkValueString); index++) {
			if (vkAttachmentLoadOpString[index].value == loadOp) {
				return vkAttachmentLoadOpString[index].text;
			}
		}
		return vkAttachmentLoadOpString[0].text;
	}

	const char* CVulkanHelper::vkAttachmentStoreOpToString(VkAttachmentStoreOp storeOp)
	{
		for (int index = 0; index < sizeof(vkAttachmentStoreOpString) / sizeof(VkValueString); index++) {
			if (vkAttachmentStoreOpString[index].value == storeOp) {
				return vkAttachmentStoreOpString[index].text;
			}
		}
		return vkAttachmentStoreOpString[0].text;
	}

	const char* CVulkanHelper::vkPipelineStageFlagsToString(VkPipelineStageFlags flags, char *szString)
	{
		szString[0] = 0;

		BOOL or = FALSE;
		for (int index = 0; index < sizeof(vkPipelineStageFlagsString) / sizeof(VkValueString); index++) {
			if (vkPipelineStageFlagsString[index].value & flags) {
				strcat_or(szString, vkPipelineStageFlagsString[index].text, &or);
			}
		}

		return szString;
	}

	const char* CVulkanHelper::vkAccessFlagsToString(VkAccessFlags flags, char *szString)
	{
		szString[0] = 0;

		BOOL or = FALSE;
		for (int index = 0; index < sizeof(vkAccessFlagsString) / sizeof(VkValueString); index++) {
			if (vkAccessFlagsString[index].value & flags) {
				strcat_or(szString, vkAccessFlagsString[index].text, &or );
			}
		}

		return szString;
	}

	const char* CVulkanHelper::vkDescriptorTypeToString(VkDescriptorType type)
	{
		for (int index = 0; index < sizeof(vkDescriptorTypeString) / sizeof(VkValueString); index++) {
			if (vkDescriptorTypeString[index].value == type) {
				return vkDescriptorTypeString[index].text;
			}
		}
		return vkDescriptorTypeString[0].text;
	}

}
